{"version":3,"sources":["file:///D:/PA/IceBear_PA_2024/3D/HexaSort_FullProject/HexaSort_FullProject/assets/Scripts/GamePlay/AutoSpawnBricks.ts"],"names":["_decorator","Component","easing","instantiate","Node","Prefab","tween","ccclass","property","AutoSpawnBricks","start","Points","node","children","spawnBricks","random","colors","isCallingTween","brickCollide","BrickCollide","temp","index","bricks","Bricks","setPosition","active","parent","SpawnContainer","length","getPosition","isPointsHaveBricks","moveToPoint","numberOfPoint","to","position","smooth","call","isCanSpawnBricks","reuslt","find","point","String","update","dt"],"mappings":"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","sourcesContent":["\nimport { _decorator, color, Component, easing, instantiate, log, Node, Prefab, tween } from 'cc';\n// import { BrickController } from '../Controller/BrickController';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('AutoSpawnBricks')\nexport class AutoSpawnBricks extends Component {\n\n    @property(Node)\n    SpawnContainer: Node = null;\n\n    @property(Prefab)\n    Bricks: Prefab = null;\n\n    @property(Prefab)\n    BrickCollide: Prefab = null;\n\n    Points: Node[] = [];\n\n    isCallingTween: boolean = false;\n\n    isPointsHaveBricks: boolean[] = [false, false, false];\n\n\n    protected start(): void {\n        this.Points = this.node.children;\n    }\n\n\n    private spawnBricks(random: number, colors: number): void {\n        this.isCallingTween = true;\n\n        let brickCollide = instantiate(this.BrickCollide);\n        let temp: number = 0;\n\n        for (let index = 0; index < random; index++) {\n            let bricks = instantiate(this.Bricks);\n            temp = index;\n            bricks.setPosition(0, temp * 0.3, temp * (-0.1));\n            bricks.children[colors].active = true;\n            bricks.parent = brickCollide;\n        };\n\n        brickCollide.parent = this.SpawnContainer;\n        brickCollide.setPosition(this.Points[this.Points.length - 1].getPosition());\n\n        if(!this.isPointsHaveBricks[0]) {\n            this.moveToPoint(brickCollide, 0);\n        } else if(!this.isPointsHaveBricks[1]) {\n            this.moveToPoint(brickCollide, 1);\n        } else {\n            this.moveToPoint(brickCollide, 2);\n        };\n    };\n\n\n    private moveToPoint(brickCollide: Node, numberOfPoint: number): void {\n        tween(brickCollide)\n        .to(0.5, {position: this.Points[numberOfPoint].getPosition()}, {easing: easing.smooth})\n        .call(() => {\n            this.isPointsHaveBricks[numberOfPoint] = true;\n            this.isCallingTween = false;\n        })\n        .start();\n    }\n\n\n    private isCanSpawnBricks(): boolean {\n        let reuslt = this.isPointsHaveBricks.find(point => point === false);\n\n        if(String(reuslt) === \"undefined\") reuslt = false;\n        else reuslt = true;\n\n        return reuslt;\n    }\n\n\n    protected update(dt: number): void {\n        if(this.isCanSpawnBricks() && !this.isCallingTween) {\n            let random = 7;\n            let colors = 3; \n            this.spawnBricks(random, colors);\n        }\n    }\n\n}\n\n\n"]}